{
  "author": {
    "name": "Thomas Fritz",
    "email": "fritztho@gmail.com",
    "url": "http://fritzthomas.com"
  },
  "contributors": [
    {
      "name": "Martin Franke",
      "email": "martin@semiwa.org",
      "url": "http://semiwa.org"
    },
    {
      "name": "Pieter Heyvaert",
      "email": "pheyvaer.heyvaert@ugent.be",
      "url": "http://semweb.mmlab.be/"
    }
  ],
  "dependencies": {
    "lodash": "^2.4.1",
    "request": "^2.40.0"
  },
  "description": "Simple SPARQL Client for node.js",
  "devDependencies": {},
  "engines": {
    "node": ">= 0.10.0"
  },
  "keywords": [
    "sparql",
    "rdf"
  ],
  "main": "index.js",
  "name": "sparql-client",
  "repository": {
    "type": "git",
    "url": "https://github.com/thomasfr/node-sparql-client.git"
  },
  "version": "0.2.0",
  "bugs": {
    "url": "https://github.com/thomasfr/node-sparql-client/issues"
  },
  "homepage": "https://github.com/thomasfr/node-sparql-client",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "license": "MIT",
  "readme": "sparql-client\n=============\n\nA simple sparql client written for [Node.js](http://nodejs.org/) (with compatibility for [Apache Fuseki](http://jena.apache.org/documentation/serving_data/)).\n\nVersion 0.2.0\n\nUsage\n=====\n\n###Querying###\n```javascript\n\nvar SparqlClient = require('sparql-client');\nvar util = require('util');\nvar endpoint = 'http://dbpedia.org/sparql';\n\n// Get the leaderName(s) of the given citys\n// if you do not bind any city, it returns 10 random leaderNames\nvar query = \"SELECT * FROM <http://dbpedia.org> WHERE {\n    ?city <http://dbpedia.org/property/leaderName> ?leaderName\n} LIMIT 10\";\nvar client = new SparqlClient(endpoint);\nconsole.log(\"Query to \" + endpoint);\nconsole.log(\"Query: \" + query);\nclient.query(query)\n  //.bind('city', 'db:Chicago')\n  //.bind('city', 'db:Tokyo')\n  //.bind('city', 'db:Casablanca')\n  .bind('city', '<http://dbpedia.org/resource/Vienna>')\n  .execute(function(error, results) {\n  process.stdout.write(util.inspect(arguments, null, 20, true)+\"\\n\");1\n});\n\n```\n\n###Formatting###\n\nFrom version 0.2.0 it is possible to add options regarding the formating of the results.\nFor example, we execute the following query (to retrieve all books and their genres).\n```\nPREFIX dbpedia-owl: <http://dbpedia.org/owl/>\nSELECT ?book ?genre WHERE {\n    ?book dbpedia-owl:literaryGenre ?genre\n}\n```\nThe *default* formatting (when no options are provided) results, for the bindings (limited to two results in our example), in\n\n```javascript\n[{ book :\n    {\n        type: 'uri',\n        value: 'http://live.dbpedia.org/page/A_Game_of_Thrones'\n    },\n    genre : {\n        type: 'uri',\n        value: 'http://live.dbpedia.org/page/Fantasy'\n    }\n}, { book :\n    {\n        type: 'uri',\n        value: 'http://live.dbpedia.org/page/A_Game_of_Thrones'\n    },\n    genre : {\n        type: 'uri',\n        value: 'http://live.dbpedia.org/page/Political_strategy'\n    }\n}]\n```\nUsing the format option *resource* with the resource option set to *book* results in\n\n```javascript\n[{ book :\n    {\n        type: 'uri',\n        value: 'http://live.dbpedia.org/page/A_Game_of_Thrones'\n    },\n    genre : [{\n        type: 'uri',\n        value: 'http://live.dbpedia.org/page/Fantasy'\n    }, {\n        type: 'uri',\n        value: 'http://live.dbpedia.org/page/Political_strategy'\n    }]\n}]\n```\n\nThis makes it easier to process the results later (in the callback), because all the genres are connected to one book (in one binding), and not spread over several bindings.\nCalling the *execute* function will look something like this\n\n```javascript\nexecute({format: 'resource', resource: 'book'}, function(error, results) {\n  process.stdout.write(util.inspect(arguments, null, 20, true)+\"\\n\");\n});\n```\n\nLicense\n=======\nThe MIT License\n\nCopyright &copy; 2014 Thomas Fritz\n\nContributors\n\n- Martin Franke (@MtnFranke)\n- Pieter Heyvaert ([@PHaDventure](https://twitter.com/PHaDventure))\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "sparql-client@0.2.0",
  "_from": "sparql-client@^0.2.0"
}
